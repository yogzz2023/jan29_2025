// File : COMMAND_TARGET.cpp // Generated by Django Backend
#include "COMMAND_TARGET.h"
#include <string.h>
#include <stdio.h>
#include <stddef.h>
#include <iostream>
COMMAND_TARGET::COMMAND_TARGET() {
    memset(&msg, 0, sizeof(msg));
    msg.ccuTrackId = 0;
    msg.radTrackId = 112;
    msg.trackConfidence = 0.5;
    msg.speed = 67.23;
    msg.direction = 83;
}

bool COMMAND_TARGET::set(unsigned char msgbuf[], unsigned short &size) {
    size = sizeof(msg);
    bool valid = true;
    hton();
    memcpy(msgbuf, &msg, sizeof(msg));
    ntoh();
    return valid;
}

bool COMMAND_TARGET::decode(unsigned char msgbuf[], unsigned short size) {
    if (size < sizeof(msg)) return false;
    memcpy(&msg, msgbuf, sizeof(msg));
    ntoh();
    return isValid();
}

bool COMMAND_TARGET::isValid() {
    return true;
}

void COMMAND_TARGET::ntoh() {
    msg.ccuTrackId = ntohs(msg.ccuTrackId);
    msg.radTrackId = ntohs(msg.radTrackId);
    msg.trackConfidence = ntohs(msg.trackConfidence);
    msg.speed = ntohs(msg.speed);
    msg.direction = ntohs(msg.direction);
}

void COMMAND_TARGET::hton() {
    ntoh();
}

void COMMAND_TARGET::print(char pstr[], int len) {
    msg.print(pstr, len);
}

void COMMAND_TARGET::print(FILE *fp) {
    const int len = 4096;
    char str[len];
    print(str, len);
    fprintf(fp, "%s", str);
}

void COMMAND_TARGET::print() {
    print(stdout);
}

void COMMAND_TARGET::printBrief(char pstr[], int len) {
    msg.printBrief(pstr, len);
}

void COMMAND_TARGET::printBrief(FILE *fp) {
    const int len = 4096;
    char str[len];
    printBrief(str, len);
    fprintf(fp, "%s", str);
}

void COMMAND_TARGET::printBrief() {
    printBrief(stdout);
}

void COMMAND_TARGET::printMin(char pstr[], int len) {
    printBrief(pstr, len);
    char last = ' ';
    for (int i = len - 1; i > 0; i--) {
        if (pstr[i] == last && last == ' ') {
            for (int j = i + 1; j < len; j++) pstr[j - 1] = pstr[j];
        }
        last = pstr[i];
    }
}

void COMMAND_TARGET::MsgBody::print(char pstr[], int len) {
    char temp[len];
    temp[0] = '\0';
    strncpy(pstr, "", len);
    snprintf(temp, len, "COMMAND_TARGET:");
    strncat(pstr, temp, len-strlen(pstr));
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "ccuTrackId:%d ", (int)this->ccuTrackId);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "radTrackId:%d ", (int)this->radTrackId);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "trackConfidence:%d ", (int)this->trackConfidence);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "speed:%d ", (int)this->speed);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "direction:%d ", (int)this->direction);
    strncat(pstr, temp, len-strlen(pstr));
}

void COMMAND_TARGET::MsgBody::printBrief(char pstr[], int len) {
    char temp[len];
    temp[0] = '\0';
    strncpy(pstr, "", len);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "%d ", (int)this->ccuTrackId);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "%d ", (int)this->radTrackId);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "%d ", (int)this->trackConfidence);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "%d ", (int)this->speed);
    strncat(pstr, temp, len-strlen(pstr));
    snprintf(temp, len, "%d ", (int)this->direction);
    strncat(pstr, temp, len-strlen(pstr));
}

